diff --git a/dist/lib/converter/types.js b/dist/lib/converter/types.js
index cc8beef359a61cfc0e05c73db612eca27173e3aa..8e1b9242853f0af19e2bbaff676061d838cc9da2 100644
--- a/dist/lib/converter/types.js
+++ b/dist/lib/converter/types.js
@@ -239,7 +239,7 @@ const importType = {
     convert(context, node) {
         const name = node.qualifier?.getText() ?? "__module";
         const symbol = context.checker.getSymbolAtLocation(node);
-        (0, assert_1.default)(symbol, "Missing symbol when converting import type node");
+        (0, assert_1.default)(symbol, "Missing symbol when converting import type node at: " + node.getText());
         return models_1.ReferenceType.createSymbolReference(context.resolveAliasedSymbol(symbol), context, name);
     },
     convertType(context, type) {
diff --git a/dist/lib/output/plugins/JavascriptIndexPlugin.js b/dist/lib/output/plugins/JavascriptIndexPlugin.js
index 1b5dcd6abe289f6c5a0df6237c5ec2799137b02b..a88ff111f4c3614e8cb0ff040631160ceda045fb 100644
--- a/dist/lib/output/plugins/JavascriptIndexPlugin.js
+++ b/dist/lib/output/plugins/JavascriptIndexPlugin.js
@@ -122,8 +122,11 @@ let JavascriptIndexPlugin = (() => {
                 return ((refl instanceof models_1.DeclarationReflection ||
                     refl instanceof models_1.DocumentReflection) &&
                     refl.url &&
-                    refl.name &&
-                    !refl.flags.isExternal);
+                    refl.name
+                    // Include externals in search because they include re-exports for e.g.
+                   // &&
+                    // !refl.flags.isExternal
+                    );
             });
             const indexEvent = new events_1.IndexEvent(initialSearchResults);
             this.owner.trigger(events_1.IndexEvent.PREPARE_INDEX, indexEvent);
